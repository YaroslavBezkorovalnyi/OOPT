// Level 1

// Інтерфейс
interface Cloneable {
  clone(): Cloneable;
}

// Клас, що реалізує інтерфейс клонуємого об'єкта
class ConcretePrototype implements Cloneable {
  private property: string;

  constructor(property: string) {
    this.property = property;
  }

  // Метод для створення глибокої копії об'єкта
  public clone(): ConcretePrototype {
    return new ConcretePrototype(this.property);
  }

  // Метод для отримання властивостей об'єкта
  public getProperty(): string {
    return this.property;
  }
}

// Клас клієнта
class Client {
  private prototype: ConcretePrototype;

  constructor(prototype: ConcretePrototype) {
    this.prototype = prototype;
  }

  // Метод для клонування об'єкта
  public operation(): void {
    const clonedObject = this.prototype.clone();
    console.log("Клонований об'єкт:", clonedObject.getProperty());
  }
}

// Використання патерну Прототип
const originalObject = new ConcretePrototype(
  "Властивість оригінального об'єкта"
);
const client = new Client(originalObject);
client.operation();

/* У цьому прикладі ми маємо інтерфейс Cloneable, який описує метод clone() для створення клонуємого об'єкта. Клас ConcretePrototype реалізує цей інтерфейс і має метод clone(), що створює глибоку копію об'єкта.

Клас Client використовує клас ConcretePrototype для створення клонуваних об'єктів. При виклику методу operation() клонується об'єкт і виводиться його властивість.

Цей приклад демонструє використання патерну Прототип для створення клонів об'єктів з допомогою прототипів. */

// Level 2

/* Технічне завдання
Назва проєкту: Генератор квестів для ігрової платформи
Опис проєкту:
Генератор квестів - це програмне забезпечення, яке дозволяє автоматично створювати різноманітні квести для ігрової платформи. 
Квести можуть бути використані в різних жанрах ігор та мають різні рівні складності та цілі.

Функціональні вимоги:
1. Створення квестів:
- Користувачі можуть створювати нові квести, обираючи тип (наприклад, пошуковий квест, бойовий квест, головоломка тощо) та вказуючи параметри квесту
 (наприклад, назва, опис, ціль, нагороди тощо).
2. Генерація вмісту квестів:
- Система має забезпечувати можливість автоматично генерувати вміст квестів на основі вибраних параметрів та типу квесту.
- Генерований вміст може включати інструкції, завдання, діалоги з персонажами, місцезнаходження тощо.
3. Редагування квестів:
- Користувачі можуть редагувати створені квести, змінюючи їх вміст, додавати або видаляти завдання, змінювати нагороди тощо.
- Система має забезпечувати можливість збереження кожного етапу редагування для подальшого повернення.

Нереалізовані вимоги:
1. Прототип (Prototype):
- Використовувати патерн Прототип для створення різних типів квестів на основі базового прототипу.
- Користувачі можуть створювати нові квести на основі існуючих, клонуючи їх та вносячи потрібні зміни.
- Забезпечити можливість створення глибоких копій квестів, включаючи їх структуру та вміст.

Технічні обмеження:
Мова програмування: TypeScript
Веб-інтерфейс для користувачів.
Зберігання квестів у базі даних для подальшого доступу та редагування.
Застосовані технології:
Frontend: HTML, CSS, JavaScript (або фреймворк, наприклад, React або Angular)
Backend: Node.js (або інший серверний JavaScript-фреймворк, наприклад, Express.js)
База даних: MongoDB (або інша NoSQL або SQL база даних, наприклад, PostgreSQL або MySQL)

Це технічне завдання описує систему генерації квестів для ігрової платформи з використанням патерну Прототип для ефективного створення та редагування квестів.*/
